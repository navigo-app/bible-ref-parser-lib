use std::collections::HashMap;

pub struct TitleMap {

}

impl TitleMap {

    pub fn create_hashmap() -> HashMap<&'static str, &'static str> {
        let mut map = HashMap::new();

        map.insert("GENESIS", "GEN");
        map.insert("EXODUS", "EXO");
        map.insert("LEVITICUS", "LEV");
        map.insert("NUMBERS", "NUM");
        map.insert("DEUTERONOMY", "DEU");
        map.insert("JOSHUA", "JOS");
        map.insert("JUDGES", "JDG");
        map.insert("RUTH", "RUT");
        map.insert("1SAMUEL", "1SA");
        map.insert("2SAMUEL", "2SA");
        map.insert("1KINGS", "1KI");
        map.insert("2KINGS", "2KI");
        map.insert("1CHRONICLES", "1CH");
        map.insert("2CHRONICLES", "2CH");
        map.insert("EZRA", "EZR");
        map.insert("NEHEMIAH", "NEH");
        map.insert("ESTHER", "EST");
        map.insert("PSALM", "PSA");
        map.insert("PROVERBS", "PRO");
        map.insert("ECCLESIASTES", "ECC");
        map.insert("SONGOFSOLOMON", "SNG");
        map.insert("SONGOFSONGS", "SNG");
        map.insert("ISAIAH", "ISA");
        map.insert("JEREMIAH", "JER");
        map.insert("LAMENTATIONS", "LAM");
        map.insert("EZEKIEL", "EZK");
        map.insert("DANIEL", "DAN");
        map.insert("HOSEA", "HOS");
        map.insert("JOEL", "JOL");
        map.insert("AMOS", "AMO");
        map.insert("OBADIAH", "OBA");
        map.insert("JONAH", "JON");
        map.insert("MICAH", "MIC");
        map.insert("NAHUM", "NAM");
        map.insert("HABAKKUK", "HAB");
        map.insert("ZEPHANIAH", "ZEP");
        map.insert("HAGGAI", "HAG");
        map.insert("ZECHARIAH", "ZEC");
        map.insert("MALACHI", "MAL");
        map.insert("MATTHEW", "MAT");
        map.insert("MARK", "MRK");
        map.insert("LUKE", "LUK");
        map.insert("JOHN", "JHN");
        map.insert("ACTS", "ACT");
        map.insert("ROMANS", "ROM");
        map.insert("1CORINTHIANS", "1CO");
        map.insert("2CORINTHIANS", "2CO");
        map.insert("GALATIANS", "GAL");
        map.insert("EPHESIANS", "EPH");
        map.insert("PHILIPPIANS", "PHP");
        map.insert("COLOSSIANS", "COL");
        map.insert("1THESSALONIANS", "1TH");
        map.insert("2THESSALONIANS", "2TH");
        map.insert("1TIMOTHY", "1TI");
        map.insert("2TIMOTHY", "2TI");
        map.insert("TITUS", "TIT");
        map.insert("PHILEMON", "PHM");
        map.insert("HEBREWS", "HEB");
        map.insert("JAMES", "JAS");
        map.insert("1PETER", "1PE");
        map.insert("2PETER", "2PE");
        map.insert("1JOHN", "1JN");
        map.insert("2JOHN", "2JN");
        map.insert("3JOHN", "3JN");
        map.insert("JUDE", "JUD");
        map.insert("REVELATION", "REV");
        map.insert("GEN", "GEN");
        map.insert("EXO", "EXO");
        map.insert("LEV", "LEV");
        map.insert("NUM", "NUM");
        map.insert("DEUT", "DEU");
        map.insert("JOS", "JOS");
        map.insert("JDG", "JDG");
        map.insert("RUT", "RUT");
        map.insert("1SAM", "1SA");
        map.insert("2SAM", "2SA");
        map.insert("1KI", "1KI");
        map.insert("2KI", "2KI");
        map.insert("1CHRON", "1CH");
        map.insert("2CHRON", "2CH");
        map.insert("EZR", "EZR");
        map.insert("NEH", "NEH");
        map.insert("EST", "EST");
        map.insert("PRO", "PRO");
        map.insert("ECCLES", "ECC");
        map.insert("SONG", "SNG");
        map.insert("ISA", "ISA");
        map.insert("JER", "JER");
        map.insert("LAM", "LAM");
        map.insert("EZEK", "EZK");
        map.insert("DAN", "DAN");
        map.insert("HOS", "HOS");
        map.insert("AMO", "AMO");
        map.insert("OBA", "OBA");
        map.insert("JNH", "JON");
        map.insert("JON", "JON");
        map.insert("MIC", "MIC");
        map.insert("NAM", "NAM");
        map.insert("HAB", "HAB");
        map.insert("ZEP", "ZEP");
        map.insert("HAG", "HAG");
        map.insert("ZECH", "ZEC");
        map.insert("MAL", "MAL");
        map.insert("MATT", "MAT");
        map.insert("MK", "MRK");
        map.insert("LK", "LUK");
        map.insert("JN", "JHN");
        map.insert("AC", "ACT");
        map.insert("RO", "ROM");
        map.insert("1COR", "1CO");
        map.insert("2COR", "2CO");
        map.insert("GAL", "GAL");
        map.insert("EPH", "EPH");
        map.insert("PHIL", "PHP");
        map.insert("COL", "COL");
        map.insert("1THES", "1TH");
        map.insert("2THES", "2TH");
        map.insert("1TIM", "1TI");
        map.insert("2TIM", "2TI");
        map.insert("TIT", "TIT");
        map.insert("PHM", "PHM");
        map.insert("HEB", "HEB");
        map.insert("JAS", "JAS");
        map.insert("1PE", "1PE");
        map.insert("2PE", "2PE");
        map.insert("1JN", "1JN");
        map.insert("2JN", "2JN");
        map.insert("3JN", "3JN");
        map.insert("REV", "REV");
        map.insert("GE", "GEN");
        map.insert("EX", "EXO");
        map.insert("NU", "NUM");
        map.insert("DEU", "DEU");
        map.insert("1SA", "1SA");
        map.insert("2SA", "2SA");
        map.insert("1CH", "1CH");
        map.insert("2CH", "2CH");
        map.insert("NE", "NEH");
        map.insert("PSA", "PSA");
        map.insert("PROV", "PRO");
        map.insert("ECC", "ECC");
        map.insert("SS", "SNG");
        map.insert("LA", "LAM");
        map.insert("EZE", "EZK");
        map.insert("EZK", "EZK");
        map.insert("DA", "DAN");
        map.insert("AM", "AMO");
        map.insert("OB", "OBA");
        map.insert("NA", "NAM");
        map.insert("ZEC", "ZEC");
        map.insert("MT", "MAT");
        map.insert("1CO", "1CO");
        map.insert("2CO", "2CO");
        map.insert("PHP", "PHP");
        map.insert("1TH", "1TH");
        map.insert("2TH", "2TH");
        map.insert("1TI", "1TI");
        map.insert("2TI", "2TI");
        map.insert("DT", "DEU");
        map.insert("PS", "PSA");
        map.insert("PR", "PRO");

        map

    }

    pub fn create_vector() -> Vec<String> {
        let mut vec = Vec::new();

        vec.push("GENESIS".to_string());
        vec.push("EXODUS".to_string());
        vec.push("LEVITICUS".to_string());
        vec.push("NUMBERS".to_string());
        vec.push("DEUTERONOMY".to_string());
        vec.push("JOSHUA".to_string());
        vec.push("JUDGES".to_string());
        vec.push("RUTH".to_string());
        vec.push("1SAMUEL".to_string());
        vec.push("2SAMUEL".to_string());
        vec.push("1KINGS".to_string());
        vec.push("2KINGS".to_string());
        vec.push("1CHRONICLES".to_string());
        vec.push("2CHRONICLES".to_string());
        vec.push("EZRA".to_string());
        vec.push("NEHEMIAH".to_string());
        vec.push("ESTHER".to_string());
        vec.push("PSALM".to_string());
        vec.push("PROVERBS".to_string());
        vec.push("ECCLESIASTES".to_string());
        vec.push("SONGOFSOLOMON".to_string());
        vec.push("SONGOFSONGS".to_string());
        vec.push("ISAIAH".to_string());
        vec.push("JEREMIAH".to_string());
        vec.push("LAMENTATIONS".to_string());
        vec.push("EZEKIEL".to_string());
        vec.push("DANIEL".to_string());
        vec.push("HOSEA".to_string());
        vec.push("JOEL".to_string());
        vec.push("AMOS".to_string());
        vec.push("OBADIAH".to_string());
        vec.push("JONAH".to_string());
        vec.push("MICAH".to_string());
        vec.push("NAHUM".to_string());
        vec.push("HABAKKUK".to_string());
        vec.push("ZEPHANIAH".to_string());
        vec.push("HAGGAI".to_string());
        vec.push("ZECHARIAH".to_string());
        vec.push("MALACHI".to_string());
        vec.push("MATTHEW".to_string());
        vec.push("MARK".to_string());
        vec.push("LUKE".to_string());
        vec.push("1JOHN".to_string());
        vec.push("2JOHN".to_string());
        vec.push("3JOHN".to_string());
        vec.push("JOHN".to_string());
        vec.push("ACTS".to_string());
        vec.push("ROMANS".to_string());
        vec.push("1CORINTHIANS".to_string());
        vec.push("2CORINTHIANS".to_string());
        vec.push("GALATIANS".to_string());
        vec.push("EPHESIANS".to_string());
        vec.push("PHILIPPIANS".to_string());
        vec.push("COLOSSIANS".to_string());
        vec.push("1THESSALONIANS".to_string());
        vec.push("2THESSALONIANS".to_string());
        vec.push("1TIMOTHY".to_string());
        vec.push("2TIMOTHY".to_string());
        vec.push("TITUS".to_string());
        vec.push("PHILEMON".to_string());
        vec.push("HEBREWS".to_string());
        vec.push("JAMES".to_string());
        vec.push("1PETER".to_string());
        vec.push("2PETER".to_string());
        vec.push("JUDE".to_string());
        vec.push("REVELATION".to_string());
        vec.push("GEN".to_string());
        vec.push("EXO".to_string());
        vec.push("LEV".to_string());
        vec.push("NUM".to_string());
        vec.push("DEUT".to_string());
        vec.push("JOS".to_string());
        vec.push("JDG".to_string());
        vec.push("RUT".to_string());
        vec.push("1SAM".to_string());
        vec.push("2SAM".to_string());
        vec.push("1KI".to_string());
        vec.push("2KI".to_string());
        vec.push("1CHRON".to_string());
        vec.push("2CHRON".to_string());
        vec.push("EZR".to_string());
        vec.push("NEH".to_string());
        vec.push("EST".to_string());
        vec.push("PRO".to_string());
        vec.push("ECCLES".to_string());
        vec.push("SONG".to_string());
        vec.push("ISA".to_string());
        vec.push("JER".to_string());
        vec.push("LAM".to_string());
        vec.push("EZEK".to_string());
        vec.push("DAN".to_string());
        vec.push("HOS".to_string());
        vec.push("AMO".to_string());
        vec.push("OBA".to_string());
        vec.push("JNH".to_string());
        vec.push("JON".to_string());
        vec.push("MIC".to_string());
        vec.push("NAM".to_string());
        vec.push("HAB".to_string());
        vec.push("ZEP".to_string());
        vec.push("HAG".to_string());
        vec.push("ZECH".to_string());
        vec.push("MAL".to_string());
        vec.push("MATT".to_string());
        vec.push("MK".to_string());
        vec.push("LK".to_string());
        vec.push("JN".to_string());
        vec.push("AC".to_string());
        vec.push("RO".to_string());
        vec.push("1COR".to_string());
        vec.push("2COR".to_string());
        vec.push("GAL".to_string());
        vec.push("EPH".to_string());
        vec.push("PHIL".to_string());
        vec.push("COL".to_string());
        vec.push("1THES".to_string());
        vec.push("2THES".to_string());
        vec.push("1TIM".to_string());
        vec.push("2TIM".to_string());
        vec.push("TIT".to_string());
        vec.push("PHM".to_string());
        vec.push("HEB".to_string());
        vec.push("JAS".to_string());
        vec.push("1PE".to_string());
        vec.push("2PE".to_string());
        vec.push("1JN".to_string());
        vec.push("2JN".to_string());
        vec.push("3JN".to_string());
        vec.push("REV".to_string());
        vec.push("GE".to_string());
        vec.push("EX".to_string());
        vec.push("NU".to_string());
        vec.push("DEU".to_string());
        vec.push("1SA".to_string());
        vec.push("2SA".to_string());
        vec.push("1CH".to_string());
        vec.push("2CH".to_string());
        vec.push("NE".to_string());
        vec.push("PSA".to_string());
        vec.push("PROV".to_string());
        vec.push("ECC".to_string());
        vec.push("SS".to_string());
        vec.push("LA".to_string());
        vec.push("EZE".to_string());
        vec.push("EZK".to_string());
        vec.push("DA".to_string());
        vec.push("AM".to_string());
        vec.push("OB".to_string());
        vec.push("NA".to_string());
        vec.push("ZEC".to_string());
        vec.push("MT".to_string());
        vec.push("1CO".to_string());
        vec.push("2CO".to_string());
        vec.push("PHP".to_string());
        vec.push("1TH".to_string());
        vec.push("2TH".to_string());
        vec.push("1TI".to_string());
        vec.push("2TI".to_string());
        vec.push("DT".to_string());
        vec.push("PS".to_string());
        vec.push("PR".to_string());

        vec
    }
}
